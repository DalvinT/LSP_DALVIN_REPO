package org.howard.edu.lsp.assignment5;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * IntegerSet class represents a mathematical set of integers.
 * It provides methods for common set operations, including union, intersection,
 * difference, and complement.
 */
public class intergerset {
    // Store the set elements in an ArrayList.
    private List<Integer> set = new ArrayList<Integer>();

    // Default Constructor
    public intergerset() {
    }

    // Constructor if you want to pass in an already initialized set
    public intergerset(ArrayList<Integer> set) {
        for (int item : set) {
            if (!this.set.contains(item)) {  // ensure no duplicates
                this.set.add(item);
            }
        }
    }

    /**
     * Clears the internal representation of the set.
     */
    public void clear() {
        set.clear();
    }

    /**
     * Returns the number of elements in the set.
     * @return size of the set.
     */
    public int length() {
        return set.size();
    }

    /**
     * Checks if this set is equal to another IntegerSet.
     * @param o the object to be compared.
     * @return true if sets contain the same elements in any order, false otherwise.
     */
    @Override
    public boolean equals(Object o) {
        if (o instanceof intergerset) {
            intergerset otherSet = (intergerset) o;
            return set.containsAll(otherSet.set) && otherSet.set.containsAll(set);
        }
        return false;
    }

    /**
     * Checks if the set contains a given value.
     * @param value the integer to check.
     * @return true if the set contains the value, false otherwise.
     */
    public boolean contains(int value) {
        return set.contains(value);
    }

    /**
     * Returns the largest item in the set.
     * @return largest integer in the set.
     * @throws IllegalStateException if the set is empty.
     */
    public int largest() {
        if (set.isEmpty()) throw new IllegalStateException("Set is empty.");
        return Collections.max(set);
    }

    /**
     * Returns the smallest item in the set.
     * @return smallest integer in the set.
     * @throws IllegalStateException if the set is empty.
     */
    public int smallest() {
        if (set.isEmpty()) throw new IllegalStateException("Set is empty.");
        return Collections.min(set);
    }

    /**
     * Adds an item to the set if it is not already present.
     * @param item integer to be added.
     */
    public void add(int item) {
        if (!set.contains(item)) {
            set.add(item);
        }
    }

    /**
     * Removes an item from the set if it exists.
     * @param item integer to be removed.
     */
    public void remove(int item) {
        set.remove((Integer) item);
    }

    /**
     * Performs the union operation with another set.
     * @param intSetb the IntegerSet to union with.
     */
    public void union(intergerset intSetb) {
        for (int item : intSetb.set) {
            if (!set.contains(item)) {
                set.add(item);
            }
        }
    }

    /**
     * Performs the intersection operation with another set.
     * Retains only elements that are in both sets.
     * @param intSetb the IntegerSet to intersect with.
     */
    public void intersect(intergerset intSetb) {
        set.retainAll(intSetb.set);
    }

    /**
     * Performs the difference operation with another set.
     * Removes all elements that are also in the specified set.
     * @param intSetb the IntegerSet to subtract from this set.
     */
    public void diff(intergerset intSetb) {
        set.removeAll(intSetb.set);
    }

    /**
     * Performs the complement operation with another set.
     * Retains only elements that are not present in the specified set.
     * @param intSetb the IntegerSet to complement with.
     */
    public void complement(intergerset intSetb) {
        List<Integer> result = new ArrayList<Integer>();
        for (int item : intSetb.set) {
            if (!set.contains(item)) {
                result.add(item);
            }
        }
        set = result;
    }

    /**
     * Checks if the set is empty.
     * @return true if the set is empty, false otherwise.
     */
    public boolean isEmpty() {
        return set.isEmpty();
    }

    /**
     * Returns a string representation of the set.
     * @return string representation of the set.
     */
    @Override
    public String toString() {
        return set.toString();
    }
}

